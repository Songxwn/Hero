<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Song`s Blog</title>
  
  
  <link href="https://songxwn.com/atom.xml" rel="self"/>
  
  <link href="https://songxwn.com/"/>
  <updated>2022-01-09T14:18:16.356Z</updated>
  <id>https://songxwn.com/</id>
  
  <author>
    <name>Song</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows上的IPv6</title>
    <link href="https://songxwn.com/ipv6-Windows/"/>
    <id>https://songxwn.com/ipv6-Windows/</id>
    <published>2022-01-09T12:54:00.000Z</published>
    <updated>2022-01-09T14:18:16.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows和EUI-64"><a href="#Windows和EUI-64" class="headerlink" title="Windows和EUI-64"></a>Windows和EUI-64</h1><p>通常情况下，链路本地地址的接口ID是由MAC地址来生成的，标准叫做EUI-64。（RFC 2373）<br>生成的64bit接口ID,叫做接口标识符。<br>SLAAC（无状态分配）所产生的地址，其接口ID也会使用接口标识符。与链路本地地址的接口ID一样。<br>而这只是在Windows Vista和Windows 2008之前的情况下。<br>为了安全，Windows开始使用了随机化接口ID和临时地址。（RFC 3041）</p><span id="more"></span><h1 id="随机标识符-接口ID"><a href="#随机标识符-接口ID" class="headerlink" title="随机标识符/接口ID"></a>随机标识符/接口ID</h1><p>由于EUI-64生成的接口标识符,是由MAC地址生成。所以很容易根据IPv6地址来推断出设备的MAC地址。<br>EUI-64 是将48bit的MAC地址，其第七位取反，然后中间填充FFFE组成64bit的接口ID。<br>所以Windows会随机生成 64bit的接口标识符。看下面的输出，链路本地地址明显是和MAC地址无关的。<br>此地址是固定，一般生成之后，不会改变。</p><blockquote><p>C:\Users\admin&gt; ipconfig /all<br>  描述. . . . . . . . . . . . . . . : Intel(R) Wi-Fi 6 AX200 160MHz<br>  物理地址. . . . . . . . . . . . . : 46-68-5C-AA-41-11<br>  DHCP 已启用 . . . . . . . . . . . : 是<br>  自动配置已启用. . . . . . . . . . : 是<br>  本地链接 IPv6 地址. . . . . . . . : fe80::1e2:5910:14f3:a9d5%13(首选)</p></blockquote><h1 id="临时地址"><a href="#临时地址" class="headerlink" title="临时地址"></a>临时地址</h1><p>由于SLAAC产生的地址的接口ID，是接口标识符的，所以后64bit是基本不变的，这样很容易被跟踪。<br>所以需要临时地址。<br>临时地址也是一样随机生成64bit接口ID，用于主机作为源IP主动访问网站和应用。但为了安全，会经常变化。<br>如在接口重新连接的时候，或者临时IPv6生存期到期的时候。会重新随机生成另一个临时IPv6地址。<br>在某种情况下，你会看到多个临时IPv6地址。这是因为旧的临时地址过期的时候，旧地址还有建立的连接。</p><h1 id="查看IPv6协议配置"><a href="#查看IPv6协议配置" class="headerlink" title="查看IPv6协议配置"></a>查看IPv6协议配置</h1><p>使用 Powershell命令 <code>get-netipv6protocol</code> </p><blockquote><p>DefaultHopLimit               : 128<br>NeighborCacheLimit(Entries)   : 256<br>RouteCacheLimit(Entries)      : 4096<br>ReassemblyLimit(Bytes)        : 262676960<br>IcmpRedirects                 : Enabled<br>SourceRoutingBehavior         : DontForward<br>DhcpMediaSense                : Enabled<br>MediaSenseEventLog            : Disabled<br>MldLevel                      : All<br>MldVersion                    : Version2<br>MulticastForwarding           : Disabled<br>GroupForwardedFragments       : Disabled<br>RandomizeIdentifiers          : Enabled  //随机接口ID开启<br>AddressMaskReply              : Disabled<br>UseTemporaryAddresses         : Enabled  //临时IPv6地址开启<br>MaxTemporaryDadAttempts       : 3        //临时IPv6的重复地址检测尝试次数<br>MaxTemporaryValidLifetime     : 7.00:00:00 //临时地址最大有效时间。<br>MaxTemporaryPreferredLifetime : 7.00:00:00<br>TemporaryRegenerateTime       : 00:00:05<br>MaxTemporaryDesyncTime        : 00:10:00<br>DeadGatewayDetection          : Enabled</p></blockquote><h1 id="SLAAC的DNS服务器地址分配–RDNSS"><a href="#SLAAC的DNS服务器地址分配–RDNSS" class="headerlink" title="SLAAC的DNS服务器地址分配–RDNSS"></a>SLAAC的DNS服务器地址分配–RDNSS</h1><p>源于一个较新的IPv6标准(RFC 8106)。从Windows 10 1703开始，Windows支持使用无状态获取DNS服务器了。<br>不过，DHCPv6 获取的DNS服务器优于通过RA报文获取的DNS服务器。<br>Android 从4.2开始支持，iOS 从4.1开始支持，MacOS从 10.7开始支持。</p><p>PS：Android至今都不支持DHCPv6，很气人。</p><p>来源： <a href="https://en.wikipedia.org/wiki/Comparison_of_IPv6_support_in_operating_systems">https://en.wikipedia.org/wiki/Comparison_of_IPv6_support_in_operating_systems</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://datatracker.ietf.org/doc/html/rfc8106">https://datatracker.ietf.org/doc/html/rfc8106</a><br><a href="https://www.networkacademy.io/ccna/ipv6/ipv6-on-windows">https://www.networkacademy.io/ccna/ipv6/ipv6-on-windows</a><br><a href="https://docs.microsoft.com/en-us/powershell/module/nettcpip/get-netipv6protocol?view=windowsserver2022-ps">https://docs.microsoft.com/en-us/powershell/module/nettcpip/get-netipv6protocol?view=windowsserver2022-ps</a></p><p>PS：随机标识符和临时地址，其他系统也会使用，如MacOS从10.7也开始使用了，Android iOS Linux等系统较新版本也支持。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Windows和EUI-64&quot;&gt;&lt;a href=&quot;#Windows和EUI-64&quot; class=&quot;headerlink&quot; title=&quot;Windows和EUI-64&quot;&gt;&lt;/a&gt;Windows和EUI-64&lt;/h1&gt;&lt;p&gt;通常情况下，链路本地地址的接口ID是由MAC地址来生成的，标准叫做EUI-64。（RFC 2373）&lt;br&gt;生成的64bit接口ID,叫做接口标识符。&lt;br&gt;SLAAC（无状态分配）所产生的地址，其接口ID也会使用接口标识符。与链路本地地址的接口ID一样。&lt;br&gt;而这只是在Windows Vista和Windows 2008之前的情况下。&lt;br&gt;为了安全，Windows开始使用了随机化接口ID和临时地址。（RFC 3041）&lt;/p&gt;</summary>
    
    
    
    <category term="network" scheme="https://songxwn.com/categories/network/"/>
    
    
    <category term="IPv6" scheme="https://songxwn.com/tags/IPv6/"/>
    
    <category term="network" scheme="https://songxwn.com/tags/network/"/>
    
    <category term="windows" scheme="https://songxwn.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>IPv6 简笔</title>
    <link href="https://songxwn.com/ipv6/"/>
    <id>https://songxwn.com/ipv6/</id>
    <published>2022-01-09T06:54:00.000Z</published>
    <updated>2022-01-09T12:57:27.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IPv6简介"><a href="#IPv6简介" class="headerlink" title="IPv6简介"></a>IPv6简介</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本质上IPv6就是为了解决IPv4地址空间不够而出现的。<br>长度由IPv4的32bit，扩展到了128bit。可以说IPv6地址数量近乎无限，以万亿为单位都显不足，如沧海一粟一般。</p><span id="more"></span><h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><p>IPv6有别于IPv4的点分十进制表示，使用了十六进制表示，以冒号 : 来每四位分割，其中0在前面的都可以省略。<br>如后面或中间有多个空位的，则可以通过 :: 来压缩表示。但只能压缩一次。<br>如 2000:0000:0000:0000:0000:0000:0000:0000，可以压缩为 2000:: 来表示。<br>2000:0000:0000:0000:0000:0000:0000:0022，则可以被压缩为 2000::22来表示。</p><h2 id="前缀长度（子网掩码）"><a href="#前缀长度（子网掩码）" class="headerlink" title="前缀长度（子网掩码）"></a>前缀长度（子网掩码）</h2><p>IPv6中的子网掩码叫做前缀长度，为128位。其中网络地址也可以用于互联,且无广播地址。所以 /127的地址，有两个可用IP。</p><h1 id="IPv6地址分类"><a href="#IPv6地址分类" class="headerlink" title="IPv6地址分类"></a>IPv6地址分类</h1><h2 id="全球单播地址"><a href="#全球单播地址" class="headerlink" title="全球单播地址"></a>全球单播地址</h2><p>范围是 2000::/3 ,对应IPv4的公网地址。</p><h2 id="链路本地地址"><a href="#链路本地地址" class="headerlink" title="链路本地地址"></a>链路本地地址</h2><p>范围是 FE80::/10，此地址是必须有的。前64bit固定为FE80:: 后64bit的接口ID可以手动指定或者通过EUI-64算法自动生成（根据MAC地址生成），<br>不过一些操作系统，比如Windows使用了随机生成，是为了隐藏MAC地址。而且还生成了一个临时地址，用于对外访问。<br>接口ID还以根据网络环境变化，网络环境不变则固定，更改则改变。</p><h3 id="EUI-64生成算法"><a href="#EUI-64生成算法" class="headerlink" title="EUI-64生成算法"></a>EUI-64生成算法</h3><p>EUI-64 是将48bit的MAC地址，其第七位取反，然后中间填充FFFE组成64bit的接口ID。</p><p>参考：<a href="https://network.51cto.com/art/201910/603898.htm">https://network.51cto.com/art/201910/603898.htm</a></p><h2 id="本地环回地址"><a href="#本地环回地址" class="headerlink" title="本地环回地址"></a>本地环回地址</h2><p>范围是 ::1/128 ，对应IPv4的 127.0.0.1/8。</p><h2 id="未指定地址"><a href="#未指定地址" class="headerlink" title="未指定地址"></a>未指定地址</h2><p>范围是 ::/128 , 对应IPv4的 0.0.0.0/32。DAD重复地址检测协议使用此IP发送报文。</p><h2 id="唯一本地地址"><a href="#唯一本地地址" class="headerlink" title="唯一本地地址"></a>唯一本地地址</h2><p>范围是 FC00::/7, 对应IPv4的私网地址。</p><h2 id="任播地址"><a href="#任播地址" class="headerlink" title="任播地址"></a>任播地址</h2><p>地址空间与全球单播地址共享，是一个IPv6特有的地址类型。可以分配给多个接口，<br>发送到任播地址的数据包，将传递到由该地址标识的最近地址。</p><h2 id="本地环回地址-1"><a href="#本地环回地址-1" class="headerlink" title="本地环回地址"></a>本地环回地址</h2><p>范围是 ::1/128 ，对应IPv4的 127.0.0.1/8。</p><h2 id="未指定地址-1"><a href="#未指定地址-1" class="headerlink" title="未指定地址"></a>未指定地址</h2><p>方位是 ::/128 , 对应IPv4的 0.0.0.0/32。DAD重复地址检测协议使用此IP发送报文。</p><h2 id="组播地址"><a href="#组播地址" class="headerlink" title="组播地址"></a>组播地址</h2><p>范围是 FE00::/10,对应IPv4的组播地址。 IPv6去无广播地址，其功能基本由组播地址代替。</p><h2 id="被请求节点组播地址"><a href="#被请求节点组播地址" class="headerlink" title="被请求节点组播地址"></a>被请求节点组播地址</h2><p>范围是 FF02::1:FF00:0/104，其地址是一种特殊的IPv6组播地址。<br>当接口配置了单播地址的时候，接口会自动生成被请求节点组播地址，并加入此组播组。用于地址解析、邻居发现和重复地址检测。<br>其中前缀固定为FF02::1:FF:, 后24bit，由单播IPv6的后24bit组成。<br>可以说此地址是为了代替广播地址产生，可以减少主机收到和无关的报文。</p><h1 id="IPv6地址自动分配方法"><a href="#IPv6地址自动分配方法" class="headerlink" title="IPv6地址自动分配方法"></a>IPv6地址自动分配方法</h1><h2 id="DHCPv6"><a href="#DHCPv6" class="headerlink" title="DHCPv6"></a>DHCPv6</h2><p>DHCPv6又可以称之为有状态分配，与IPv4的DHCP很相似。分发的地址由DHCPv6服务器控制。<br>可以分配IPv6地址，前缀长度、网关、DNS、域名等信息。</p><h2 id="SLAAC"><a href="#SLAAC" class="headerlink" title="SLAAC"></a>SLAAC</h2><p>无状态分配，由路由器通过 RS报文分发前缀信息，网关为分发前缀的路由。<br>其中后64bit的接口ID,由链路本地地址的后64bit组成。所以无状态分配的前缀必须大于等于/64。<br>比较新的标准可以使用RA报文分配DNS服务器。之前是不支持分配的。</p><h2 id="无状态DHCPv6"><a href="#无状态DHCPv6" class="headerlink" title="无状态DHCPv6"></a>无状态DHCPv6</h2><p>IPv6前缀信息由RA报文分发，通过SLACC生成地址。其他信息，例如DNS使用DHCPv6分配。无状态+有状态结合的方法分发地址。</p><h1 id="IPv6工具"><a href="#IPv6工具" class="headerlink" title="IPv6工具"></a>IPv6工具</h1><h2 id="IPv6的子网计算器"><a href="#IPv6的子网计算器" class="headerlink" title="IPv6的子网计算器"></a>IPv6的子网计算器</h2><p><a href="http://www.gestioip.net/cgi-bin/subnet_calculator.cgi">http://www.gestioip.net/cgi-bin/subnet_calculator.cgi</a></p><h2 id="IPv6归属查询"><a href="#IPv6归属查询" class="headerlink" title="IPv6归属查询"></a>IPv6归属查询</h2><p><a href="http://ip.zxinc.org/ipquery">http://ip.zxinc.org/ipquery</a></p><h2 id="IPv6连接测试"><a href="#IPv6连接测试" class="headerlink" title="IPv6连接测试"></a>IPv6连接测试</h2><p><a href="http://www.test-ipv6.com/">http://www.test-ipv6.com</a></p><p>PS：写博客好麻烦，我好懒。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;IPv6简介&quot;&gt;&lt;a href=&quot;#IPv6简介&quot; class=&quot;headerlink&quot; title=&quot;IPv6简介&quot;&gt;&lt;/a&gt;IPv6简介&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;本质上IPv6就是为了解决IPv4地址空间不够而出现的。&lt;br&gt;长度由IPv4的32bit，扩展到了128bit。可以说IPv6地址数量近乎无限，以万亿为单位都显不足，如沧海一粟一般。&lt;/p&gt;</summary>
    
    
    
    <category term="network" scheme="https://songxwn.com/categories/network/"/>
    
    
    <category term="IPv6" scheme="https://songxwn.com/tags/IPv6/"/>
    
    <category term="network" scheme="https://songxwn.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Windows 部署私有KMS服务器。</title>
    <link href="https://songxwn.com/KMS-Windows/"/>
    <id>https://songxwn.com/KMS-Windows/</id>
    <published>2021-11-27T12:56:00.000Z</published>
    <updated>2022-01-09T07:30:44.468Z</updated>
    
    <content type="html"><![CDATA[<p>程序下载地址：<a href="https://github.com/Wind4/vlmcsd">https://github.com/Wind4/vlmcsd</a></p><p>此文章介绍，怎么在Windows上运行vlmcsd，并注册为服务。</p><span id="more"></span><h2 id="下载解压程序"><a href="#下载解压程序" class="headerlink" title="下载解压程序"></a>下载解压程序</h2><p>去 <a href="https://github.com/Wind4/vlmcsd/releases">https://github.com/Wind4/vlmcsd/releases</a> 下载 binaries.tar.gz 文件。<br>下载到本地，解压。解压软件建议用 Bandizip <a href="https://www.bandisoft.com/bandizip">https://www.bandisoft.com/bandizip</a><br>将binaries/Windows/intel 文件夹重命名为vlmcsd，复制到C:\ 下面。</p><h2 id="注册为Windows-服务。"><a href="#注册为Windows-服务。" class="headerlink" title="注册为Windows 服务。"></a>注册为Windows 服务。</h2><p>以管理员身份运行CMD 或者 Power shell</p><p>输入 <code>cd C:\vlmcsd</code></p><p>// 切换到程序目录</p><p>输入 <code>./vlmcsd-Windows-x64.exe -s -l C:\vlmcsd\KMS.log</code></p><p>// -s 为安装为服务，-S 是删除服务，-l是指定输出日志文件路径；</p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>输入 <code>Services.msc</code> 打开服务管理。</p><p>找到Key Management Server 服务器，启动服务，并确保启动类型为自动。</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>将防火墙开放1688/tcp端口，或者直接关闭防火墙。</p><h2 id="验证服务是否正常运行"><a href="#验证服务是否正常运行" class="headerlink" title="验证服务是否正常运行"></a>验证服务是否正常运行</h2><p>输入 <code>./vlmcs-Windows-x64.exe</code></p><p>显示 successful 字样，则代表部署成功。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;程序下载地址：&lt;a href=&quot;https://github.com/Wind4/vlmcsd&quot;&gt;https://github.com/Wind4/vlmcsd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此文章介绍，怎么在Windows上运行vlmcsd，并注册为服务。&lt;/p&gt;</summary>
    
    
    
    <category term="KMS" scheme="https://songxwn.com/categories/KMS/"/>
    
    
    <category term="Windows" scheme="https://songxwn.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>部署私有KMS服务器，并设置自动激活Windows和office</title>
    <link href="https://songxwn.com/KMS/"/>
    <id>https://songxwn.com/KMS/</id>
    <published>2021-11-23T15:18:00.000Z</published>
    <updated>2021-11-27T12:57:04.717Z</updated>
    
    <content type="html"><![CDATA[<p>#Docker镜像地址： <a href="https://hub.docker.com/r/mogeko/vlmcsd">https://hub.docker.com/r/mogeko/vlmcsd</a></p><p>#此程序的单独地址： <a href="https://github.com/Wind4/vlmcsd">https://github.com/Wind4/vlmcsd</a></p><h2 id="准备环境："><a href="#准备环境：" class="headerlink" title="准备环境："></a>准备环境：</h2><p>一台支持Docker的Linux服务器【运行KMS服务器】，运行在内网的DNS服务器【SRV记录】，DHCP服务器【分配DNS域名】。</p><span id="more"></span><p><code>docker run -d -p 1688:1688 --restart=always  --name kms mogeko/vlmcsd </code></p><p>// 部署KMS服务器，使用Docker ，端口为 TCP/1688。</p><p><code>docker logs vlmcsd</code></p><p>2021-07-27 08:14:00: Listening on [::]:1688<br>2021-07-27 08:14:00: Listening on 0.0.0.0:1688<br>2021-07-27 08:14:00: vlmcsd svn1112-2-gf1a3c7f, built 2021-07-26 18:11:51 UTC started successfully</p><p>查看日志，确定正常工作。</p><h2 id="手动激活"><a href="#手动激活" class="headerlink" title="手动激活"></a>手动激活</h2><p><code>slmgr /ipk N69G4-B89J2-4G8F4-WWYCC-J464C</code></p><p>//安装密钥</p><p>KMS安装密钥，密钥大全地址: <a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys">https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys</a></p><p><code>slmgr /skms  192.168.1.13</code></p><p>//设置KMS服务器IP</p><p><code>slmgr /ato</code></p><p>//立即激活Windows</p><p><code>slmgr /xpr</code></p><p>//查看激活剩余时间</p><p><code>slmgr /dlv</code></p><p>//查看激活的详细信息</p><p>PS: 默认情况下，会激活 180天，然后每 10080 分钟自动续期一次（只要KMS服务器可用）</p><h2 id="使用DNS-DHCP自动激活"><a href="#使用DNS-DHCP自动激活" class="headerlink" title="使用DNS+DHCP自动激活"></a>使用DNS+DHCP自动激活</h2><p>首先添加 SRV 记录到DNS服务器的域名中</p><p>记录名字为 _vlmcs._tcp.</p><p>域控的话，直接有tcp的下级域，所以不需要加上TCP</p><p>然后进入你域控域名中的 _tcp文件夹，然后右键选择其他新记录，然后选择SRV记录。</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>然后填写以上，域名为你的域名。服务为 _vlmcs 协议为 _tcp 。端口号为 1688 。<br>提供此服务的主机为   KMS服务器的IP。</p><p>然后配置DHCP 服务器分配的DNS域名后缀为 esc.com即可。<br>之后，未激活的Windows 开机就会通过DHCP获取到 DNS 后缀，然后通过DNS域名中的SVR记录找到<br>KMS激活服务器，并自动激活。其中VL的OFFICE也会自动激活。</p><h2 id="Office-VL版"><a href="#Office-VL版" class="headerlink" title="Office VL版"></a>Office VL版</h2><p>建议使用 Office Tool Plus 安装VL版本，并安装许可证。</p><p>下载地址： <a href="https://otp.landian.vip/zh-cn/download.html">https://otp.landian.vip/zh-cn/download.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;#Docker镜像地址： &lt;a href=&quot;https://hub.docker.com/r/mogeko/vlmcsd&quot;&gt;https://hub.docker.com/r/mogeko/vlmcsd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#此程序的单独地址： &lt;a href=&quot;https://github.com/Wind4/vlmcsd&quot;&gt;https://github.com/Wind4/vlmcsd&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;准备环境：&quot;&gt;&lt;a href=&quot;#准备环境：&quot; class=&quot;headerlink&quot; title=&quot;准备环境：&quot;&gt;&lt;/a&gt;准备环境：&lt;/h2&gt;&lt;p&gt;一台支持Docker的Linux服务器【运行KMS服务器】，运行在内网的DNS服务器【SRV记录】，DHCP服务器【分配DNS域名】。&lt;/p&gt;</summary>
    
    
    
    <category term="KMS" scheme="https://songxwn.com/categories/KMS/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://songxwn.com/hello-world/"/>
    <id>https://songxwn.com/hello-world/</id>
    <published>2021-11-22T22:44:34.000Z</published>
    <updated>2021-11-24T08:07:48.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a>欢迎来到我的博客！</h2><span id="more"></span><p>今天终于白嫖用 Github Pages,部署了一个自己的博客，打算发些自己写的技术文章。<br>使用Hexo+Next主题，然后套了CF的CDN。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;欢迎来到我的博客！&quot;&gt;&lt;a href=&quot;#欢迎来到我的博客！&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到我的博客！&quot;&gt;&lt;/a&gt;欢迎来到我的博客！&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
